import pygame
import math
import random
pygame.init()

clock = pygame.time.Clock()
FPS = 60

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 600

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Endless Scroll")

bg = pygame.image.load("sky.png").convert()
bg_width = bg.get_width()

scroll = 0
titles = math.ceil(SCREEN_WIDTH / bg_width) + 1

jump_sound = pygame.mixer.Sound('Slime.wav')


class Dog(pygame.sprite.Sprite):
    def __init__(self, x, y, new_width, new_height):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0
        self.counter = 0
        for num in range(1,4):
            img = pygame.image.load(f"img_{num}.png")
            img = pygame.transform.scale(img, (100, 100))
            self.images.append(img)
        self.image = self.images[self.index]
        self.image = pygame.transform.scale(self.image, (new_width, new_height))
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0
        self.jump_height = -13
        self.jumping = False

    def update(self):

        self.vel += 0.3
        if self.vel > 8:
            self.vel = 8

        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and not self.jumping and self.rect.bottom >= SCREEN_HEIGHT:
            self.jumping = True
            self.vel = self.jump_height
            jump_sound.play()

        if not self.jumping:
            if self.rect.bottom < SCREEN_HEIGHT:
                self.rect.y += int(self.vel)
            if self.rect.bottom >= SCREEN_HEIGHT:
                self.rect.bottom = SCREEN_HEIGHT



        if self.jumping:
            self.rect.y += int(self.vel)
            if self.rect.bottom >= SCREEN_HEIGHT:
                self.jumping = False
                self.rect.bottom = SCREEN_HEIGHT



        self.counter += 1
        jump_cooldown = 10

        if self.counter > jump_cooldown:
            self.counter = 0
            self.index += 1
            if self.index >= len(self.images):
                self.index = 0
            self.image = self.images[self.index]

class Obstacle(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height, image_path):

        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(image_path)
        self.image = pygame.transform.scale(self.image, (width, height))
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.passed = False

    def update(self):
        self.rect.x -= 5

obstacle_group = pygame.sprite.Group()
obstacle_interval = 300
def create_obstacle():
    global obstacle_interval
    obstacle_width = 50
    obstacle_height = random.randint(50, 100)
    obstacle = Obstacle(SCREEN_WIDTH + obstacle_interval, SCREEN_HEIGHT - obstacle_height, obstacle_width, obstacle_height, "strawberry cake.png")
    obstacle_group.add(obstacle)
    obstacle_interval += 300


dog_group = pygame.sprite.Group()

moving = Dog(100, int(SCREEN_HEIGHT // 1.3), 150, 150)

dog_group.add(moving)

def obstacle_ahead(sprite, group, distance):
    for obstacle in group:
        future_position = sprite.rect.move(distance, 0)

        if sprite.rect.colliderect(obstacle.rect) or future_position.colliderect(obstacle.rect):
            return obstacle
    return None

start_font = pygame.font.Font(None, 64)
start_text = start_font.render('START', True, (255, 255, 255))

game_over_font = pygame.font.Font(None, 64)
game_over_text = game_over_text = game_over_font.render('GAME OVER', True, (30, 70, 150))
game_over_text_rect = game_over_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))

score = 0

game_over = False

font = pygame.font.Font(None, 36)
score_text = font.render(f"Score: 0", True, (30, 70, 150))

pygame.mixer.music.load('Fast Fight Loop.wav')
pygame.mixer.music.stop()
game_active = False

final_score = 0
final_score_font = pygame.font.Font(None, 64)
final_score_text = None
final_score_text_rect = None

game_over_sound = pygame.mixer.Sound('FX061.mp3')

run = True
while run:
    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                if game_over:
                    game_over = False
                    final_score = score
                    score = 0
                    obstacle_group.empty()
                    moving.rect.center = (100, int(SCREEN_HEIGHT // 1.3))
                    game_active = True
                    pygame.mixer.music.play(-1)
                elif not game_active:
                    game_active = True
                    pygame.mixer.music.play(-1)


    for i in range(0, titles):
        screen.blit(bg, (i * bg_width + scroll,0))

    score_text = font.render(f"Score: {score}", True, (30, 70, 150))
    screen.blit(score_text, (10, 10))


    if not game_over:
        dog_group.draw(screen)
    dog_group.update()

    obstacle_group.draw(screen)
    obstacle_group.update()

    obstacle_a = obstacle_ahead(moving, obstacle_group, 0.5)
    if obstacle_a and not obstacle_a.passed and not moving.jumping:
        if moving.rect.colliderect(obstacle_a.rect):
            game_over = True

    for obstacle in obstacle_group:
        if obstacle.rect.right < 0:
            if not obstacle.passed:
                obstacle.passed = True
                score += 1

    if game_over:

        screen.blit(game_over_text, game_over_text_rect)




    scroll -= 5
    if abs(scroll) > bg_width:
        scroll = 0

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and game_over:
                game_over = False
                score = 0
                obstacle_group.empty()
                moving.rect.center = (100, int(SCREEN_HEIGHT // 1.3))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    if random.randint(1, 100) == 1:
        create_obstacle()

    for obstacle in obstacle_group:
        if obstacle.rect.right < 0:
            if not obstacle.passed:
                obstacle.passed = True
                score += 1

    pygame.display.update()

    if game_over:
        pygame.mixer.music.stop()
        game_over_sound.play()


        if final_score_text is None:
            final_score = score

            final_score_text = final_score_font.render('Final Score: ' + str(final_score), True, (30, 70, 150))
            final_score_text_rect = final_score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))

        screen.blit(game_over_text, game_over_text_rect)
        screen.blit(final_score_text, final_score_text_rect)



        pygame.display.update()
        pygame.time.delay(3000)




pygame.quit()
